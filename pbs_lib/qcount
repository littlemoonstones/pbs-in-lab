#!/bin/bash
tmp_file=$(mktemp -p .)
users=$(mktemp -p .)
nums=$(mktemp -p .)
# tmp1=$(mktemp -p .)
trap "rm $tmp_file $users $nums" EXIT

function sum_job_cpu(){
    array=($1)
    user=${array[0]}
    # $6: njobs
    # $7: ncpus
    qstat -u $user|awk 'NR>5 {x+=$6;y+=$7}END {print x,y}'|xargs -i echo {} ${array[1]}
}

function makeDashedLine(){
    length=$1
    printf -- '-%.0s' $(eval echo {1..$length})
}

export -f sum_job_cpu
export -f makeDashedLine

isShowAll=false
while getopts 'a' OPT; do
    case $OPT in
        a) isShowAll=true;;
        ?) echo "invalid argument";;
    esac
done

qstat > $tmp_file
if [[ $isShowAll = "true" ]]; then
    awk 'NR>2 {print $3}' $tmp_file|sort|uniq > $users
else
    echo $USER > $users
fi

cat $users| awk '{print $1" "NR}' | xargs -n2 -P8 -I{} bash -c 'sum_job_cpu "{}"'| sort -k 3 -n|cut -d " " -f 1,2|tr " " "," > $nums

user_length=$(wc -L < $users)
njobs_length=$(( $(awk -F, '{print $1}' $nums | wc -L) + 2))
ncpus_length=$(( $(awk -F, '{print $2}' $nums | wc -L) + 2))

user_header=$(makeDashedLine $user_length)
ncpus_header=$(makeDashedLine $ncpus_length)
njobs_header=$(makeDashedLine $njobs_length)

# generate tmp result file
echo "User,njobs,ncpus," > $tmp_file
echo "$user_header,$njobs_header,$ncpus_header" >> $tmp_file
paste -d, $users $nums >> $tmp_file
column -t -s "," $tmp_file
